.import mem;
.import core;
.plugin regex;
.plugin direct;

.let I8 = .Idx 256;
.let _32 = 4294967296;
.let I32 = .Idx _32;
.let Top = ⊤:.Nat;

// ==> ^[a-zA-Z0-9](?:[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~\-]*[a-zA-Z0-9])?@[a-zA-Z0-9](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9_\-]*[a-zA-Z0-9])?)*\.[a-zA-Z][a-zA-Z]+$
.let letterOrDigit = %regex.disj 3 (%regex.range ('0','9'), %regex.range ('a','z'), %regex.range ('A','Z'));
.let userName = %regex.conj 2 (letterOrDigit, %regex.quant.optional (%regex.conj 2 (%regex.quant.star (%regex.disj 21 (letterOrDigit, %regex.lit '.', %regex.lit '!', %regex.lit '#',
        %regex.lit '$', %regex.lit '%', %regex.lit '&', %regex.lit '\'', %regex.lit '*', %regex.lit '+', %regex.lit '/', %regex.lit '=',
        %regex.lit '?', %regex.lit '^', %regex.lit '_', %regex.lit '`', %regex.lit '{', %regex.lit '|', %regex.lit '}', %regex.lit '~', %regex.lit '-')),
    letterOrDigit)));
.let letter = %regex.disj 2 (%regex.range ('a','z'), %regex.range ('A','Z'));
.let domain = %regex.conj 6 (letterOrDigit, %regex.quant.optional (%regex.conj 2 (%regex.quant.star (%regex.disj 2 (letterOrDigit, %regex.lit '-')), letterOrDigit)),
                             %regex.quant.star (%regex.conj 3 (%regex.lit '.', letterOrDigit, %regex.quant.optional (%regex.conj 2 (%regex.quant.star (%regex.disj 3 (letterOrDigit, %regex.lit '-', %regex.lit '_')), letterOrDigit)))),
                             %regex.lit '.', letter, %regex.quant.plus letter);
.let re = %regex.conj 3 (userName,
            %regex.lit '@',
            domain);

.con .extern match[mem: %mem.M, to_match: %mem.Ptr («⊤:.Nat; .Idx 256», 0), exit : .Cn [%mem.M, .Idx 2]] =
    .let (`mem, matched, pos) = re Top (mem, to_match, 0:(.Idx Top));
    .let last_elem_ptr = %mem.lea (Top, <Top; .Idx 256>, 0) (to_match, pos);
    .let (`mem, last_elem) = %mem.load (mem, last_elem_ptr);
    exit (mem, %core.bit2.and_ 0 (matched, %core.icmp.e (last_elem, 0:I8)));
